using FewSpecialFunctions, Plots, SpecialFunctions, QuadGK, BenchmarkTools, LaTeXStrings

plot_font = "Computer Modern"
default(
    fontfamily=plot_font,
    linewidth=2.5,
    framestyle=:box,
    label=nothing,
    grid=true,
    palette=:tab10,
)

function Fermi_Dirac_integral(j::Real, eta::Real)
    if j < -1 / 2
        error("The order should be equal to or larger than -1/2.")
    else
        x = eta
        y = zero(x)
        if j == 0
            y = log(1 + exp(x))
        elseif j == 1 / 2
            # Model proposed in [1]
            # Expressions from eqs. (22)-(24) of [2]
            mu = x^4 + 50 + 33.6 * x * (1 - 0.68 * exp(-0.17 * (x + 1)^2))
            xi = 3 * sqrt(pi) / (4 * mu^(3 / 8))
            y = (exp(-x) + xi)^-1
        elseif j == 3 / 2
            # Model proposed in [3]
            # Expressions from eq. (5) of [3]
            # The integral is divided by gamma(j + 1) to make it consistent with [1] and [2].
            a = 14.9
            b = 2.64
            c = 9 / 4
            y = ((j + 1) * 2^(j + 1) / (b + x + (abs(x - b).^ c + a) .^ (1 / c)) .^ (j + 1) +
                 exp(-x) / gamma(j + 1))^-1 / gamma(j + 1)
        else
            # Model proposed in [4]
            # Expressions from eqs. (6)-(7) of [4]
            # The integral is divided by gamma(j + 1) to make it consistent with [1] and [2].
            a = (1 + 15 / 4 * (j + 1) + 1 / 40 * (j + 1)^2)^(1 / 2)
            b = 1.8 + 0.61 * j
            c = 2 + (2 - sqrt(2)) * 2^(-j)
            y = ((j + 1) * 2^(j + 1) / (b + x + (abs(x - b) .^ c + a^c) .^ (1 / c)) .^ (j + 1) +
                 exp(-x) / gamma(j + 1))^-1 / gamma(j + 1)
        end
    end
    return y
end


function FD_int_num(eta, j::Int, tol::Float64, Nmax::Int)
    if !(typeof(eta) <: Number || typeof(eta) <: AbstractVector{<:Number})
        error("eta must be a number or an array of numbers")
    end

    if typeof(eta) <: Number
        eta = [eta]
    end

    y = similar(eta, 1)
    N = similar(eta, 1)
    err = similar(eta, 1)

    for k = 1:length(eta)
        y_old = 0.0
        for n = 1:Nmax
            a = -4.5
            b = 5.0
            t = range(a, b, length=n+1)
            x = exp.(t .- exp.(-t))
            f(x) = x * (1 + exp(-t[x])) * x^j / (1 + exp(x - eta[k]))
            quad = quadgk(f, Float64(a), Float64(b))
            y[k] = quad[1]
            err[k] = quad[2]
            if n > 1 && abs(y[k] - y_old) < tol
                break
            end
            y_old = y[k]
        end
        if n == Nmax
            error("Maximum number of iterations reached")
        end
        y[k] = y[k] / gamma(j + 1)
        N[k] = n
    end

    return y, N, err
end


function fermi12(x::Float64)::Float64
    a1 = [5.75834152995465e6, 1.30964880355883e7, 1.07608632249013e7, 3.93536421893014e6, 6.42493233715640e5, 4.16031909245777e4, 7.77238678539648e2, 1.00000000000000e0]
    b1 = [6.49759261942269e6, 1.70750501625775e7, 1.69288134856160e7, 7.95192647756086e6, 1.83167424554505e6, 1.95155948326832e5, 8.17922106644547e3, 9.02129136642157e1]
    a2 = [4.85378381173415e-14, 1.64429113030738e-11, 3.76794942277806e-9, 4.69233883900644e-7, 3.40679845803144e-5, 1.32212995937796e-3, 2.60768398973913e-2, 2.48653216266227e-1, 1.08037861921488e0, 1.91247528779676e0, 1.00000000000000e0]
    b2 = [7.28067571760518e-14, 2.45745452167585e-11, 5.62152894375277e-9, 6.96888634549649E-7, 5.02360015186394e-5, 1.92040136756592e-3, 3.66887808002874e-2, 3.24095226486468e-1, 1.16434871200131e0, 1.34981244060549e0, 2.01311836975930e-1, -22.14562434782759e-2]
    an = 0.5
    m1, k1, m2, k2 = 7, 7, 10, 11
    
    if x < 2.0
        xx = exp(x)
        rn = xx + a1[m1]
        for i in m1-1:-1:1
            rn = rn*xx + a1[i]
        end
        den = b1[k1+1]
        for i in k1:-1:1
            den = den*xx + b1[i]
        end
        fermi = xx*rn/den
    else
        xx = 1.0 / x^2
        rn = xx + a2[m2]
        for i in m2-1:-1:1
            rn = rn*xx + a2[i]
        end
        den = b2[k2+1]
        for i in k2:-1:1
            den = den*xx + b2[i]
        end
        fermi = x^(an+1.0)*rn/den
    end
    return fermi
end

function fermi32(x::Float64)::Float64
    a1 = [4.32326386604283e4, 8.55472308218786e4, 5.95275291210962e4, 1.77294861572005e4, 2.21876607796460e3, 9.90562948053193e1, 1.00000000000000e0]
    b1 = [3.25218725353467e4, 7.01022511904373e4, 5.50859144223638e4, 1.95942074576400e4, 3.20803912586318e3, 2.20853967067789e2, 5.05580641737527e0, 1.99507945223266e-2]
    a2 = [2.80452693148553e-13, 8.60096863656367e-11, 1.62974620742993e-8, 1.63598843752050e-6, 9.12915407846722e-5, 2.62988766922117e-3, 3.85682997219346e-2, 2.78383256609605e-1, 9.02250179334496e-1, 1.00000000000000e0]
    b2 = [7.01131732871184e-13, 2.10699282897576e-10, 3.94452010378723e-10, 3.84703231868724e-6, 2.04569943213216e-4, 5.31999109566385e-3, 6.39899717779153e-2, 3.14236143831882e-1, 4.70252591891375e-1, -2.15540156936373e-2, 2.34829436438087e-3]
    an = 0.5
    m1, k1, m2, k2 = 6, 7, 9, 10
    
    if x < 1.1
        xx = exp(x)
        rn = xx + a1[m1]
        for i in m1-1:-1:1
            rn = rn*xx + a1[i]
        end
        den = b1[k1+1]
        for i in k1:-1:1
            den = den*xx + b1[i]
        end
        fermi = xx*rn/den
    else
        xx = 1.0 / x^2
        rn = xx + a2[m2]
        for i in m2-1:-1:1
            rn = rn*xx + a2[i]
        end
        den = b2[k2+1]
        for i in k2:-1:1
            den = den*xx + b2[i]
        end
        fermi = x^(an+1.0)*rn/den
    end
    return fermi
end

function fermi52(x::Float64)::Float64
    a1 = [6.61606300631656e4, 1.20132462801652e5, 7.67255995316812e4, 2.10427138842443e4, 2.44325236813275e3, 1.02589947781696e2,1.000000000000000]
    b1 = [1.99078071053871e4, 3.79076097261066e4, 2.60117136841197e4, 7.97584657659364e3, 1.10886130159658e3, 6.35483623268093e1, 1.16951072617142e0, 3.31482978240026e-3]
    a2 = [8.42667076131315e-12, 2.31618876821567e-9, 3.54323824923987e-7, 2.77981736000034e-5, 1.14008027400645e-3, 2.32779790773633e-2, 2.39564845938301e-1, 1.24415366126179e0, 3.18831203950106e0, 3.42040216997894e0, 1.00000000000000e0]
    b2 = [2.94933476646033e-11, 7.68215783076936e-9, 1.12919616415947e-6, 8.09451165406274e-5, 2.81111224925648e-3, 3.99937801931919e-2, 2.27132567866839e-1, 5.31886045222680e-1, 3.70866321410385e-1, 2.27326643192516e-2]
    an = 0.5
    m1, k1, m2, k2 = 6, 7, 10, 9
    
    if x < 2.0
        xx = exp(x)
        rn = xx + a1[m1]
        for i in m1-1:-1:1
            rn = rn*xx + a1[i]
        end
        den = b1[k1+1]
        for i in k1:-1:1
            den = den*xx + b1[i]
        end
        fermi = xx*rn/den
    else
        xx = 1.0 / x^2
        rn = xx + a2[m2]
        for i in m2-1:-1:1
            rn = rn*xx + a2[i]
        end
        den = b2[k2+1]
        for i in k2:-1:1
            den = den*xx + b2[i]
        end
        fermi = x^(an+1.0)*rn/den
    end
    return fermi
end

function fermiminus12(x::Float64)::Float64
    a1 = [1.71446374704454e7, 3.88148302324068e7, 3.16743385304962e7, 1.14587609192151e7, 1.83696370756153e6, 1.14980998186874e5, 1.98276889924768e3, 1.00000000000000e0]
    b1 = [9.67282587452899e6, 2.87386436731785e7, 3.26070130734158e7, 1.77657027846367e7, 4.81648022267831e6, 6.13709569333207e5, 3.13595854332114e4, 4.35061725080755e2]
    a2 = [-4.46620341924942e-15, -1.58654991146236e-12, -4.44467627042232e-10, -6.84738791621745e-8, -6.64932238528105e-6, -3.69976170193942e-4, -1.12295393687006e-2, -1.60926102124442e-1, -8.52408612877447e-1, -7.45519953763928e-1, 2.98435207466372e0, 1.00000000000000e0]
    b2 = [-2.23310170962369e-15,-7.94193282071464e-13, -2.22564376956228e-10, -3.43299431079845e-8, -3.33919612678907e-6, -1.86432212187088e-4, -5.69764436880529e-3, -8.34904593067194e-2, -4.78770844009440e-1, -4.99759250374148e-1, 1.86795964993052e0, 4.16485970495288e-1]
    an = 0.5
    m1, k1, m2, k2 = 7, 7, 11, 11
    
    if x < 2.0
        xx = exp(x)
        rn = xx + a1[m1]
        for i in m1-1:-1:1
            rn = rn*xx + a1[i]
        end
        den = b1[k1+1]
        for i in k1:-1:1
            den = den*xx + b1[i]
        end
        fermi = xx*rn/den
    else
        xx = 1.0 / x^2
        rn = xx + a2[m2]
        for i in m2-1:-1:1
            rn = rn*xx + a2[i]
        end
        den = b2[k2+1]
        for i in k2:-1:1
            den = den*xx + b2[i]
        end
        fermi = x^(an+1.0)*rn/den
    end
    return fermi
end

@doc raw"""
    FermiDiracIntegral(j,x)

The Fermi-Dirac integral
    
```math
    F_j(x) = \int_0^\infty \frac{t^j}{\exp(t-x)+1} \, dt
```

Returns the value ``F_j(x)``

Resources:
[1] D. Bednarczyk and J. Bednarczyk, Phys. Lett. A, 64, 409 (1978)
[2] J. S. Blakemore, Solid-St. Electron, 25, 1067 (1982)
[3] X. Aymerich-Humet, F. Serra-Mestres, and J. Millan, Solid-St. Electron, 24, 981 (1981)
[4] X. Aymerich-Humet, F. Serra-Mestres, and J. Millan, J. Appl. Phys., 54, 2850 (1983)
[5] H. M. Antia, Rational Function Approximations for Fermi-Dirac Integrals (1993)

https://arxiv.org/abs/0811.0116
https://de.wikipedia.org/wiki/Fermi-Dirac-Integral
https://dlmf.nist.gov/25.12#iii


"""
function FermiDiracIntegral(j::Real, eta::Real)
    if j < -1 / 2
        error("The order should be equal to or larger than -1/2.")
    else
        x = eta
        y = zero(x)
        if j == 0
            y = log(1 + exp(x))
        elseif j == -1 / 2
            # Method from [5]
            a1 = [1.71446374704454e7, 3.88148302324068e7, 3.16743385304962e7, 1.14587609192151e7, 1.83696370756153e6, 1.14980998186874e5, 1.98276889924768e3, 1.00000000000000e0]
            b1 = [9.67282587452899e6, 2.87386436731785e7, 3.26070130734158e7, 1.77657027846367e7, 4.81648022267831e6, 6.13709569333207e5, 3.13595854332114e4, 4.35061725080755e2]
            a2 = [-4.46620341924942e-15, -1.58654991146236e-12, -4.44467627042232e-10, -6.84738791621745e-8, -6.64932238528105e-6, -3.69976170193942e-4, -1.12295393687006e-2, -1.60926102124442e-1, -8.52408612877447e-1, -7.45519953763928e-1, 2.98435207466372e0, 1.00000000000000e0]
            b2 = [-2.23310170962369e-15,-7.94193282071464e-13, -2.22564376956228e-10, -3.43299431079845e-8, -3.33919612678907e-6, -1.86432212187088e-4, -5.69764436880529e-3, -8.34904593067194e-2, -4.78770844009440e-1, -4.99759250374148e-1, 1.86795964993052e0, 4.16485970495288e-1]
            an = 0.5
            m1, k1, m2, k2 = 7, 7, 11, 11
            if x < 2.0
                xx = exp(x)
                rn = xx + a1[m1]
                for i in m1-1:-1:1
                    rn = rn*xx + a1[i]
                end
                den = b1[k1+1]
                for i in k1:-1:1
                    den = den*xx + b1[i]
                end
                y = xx*rn/den
            else
                xx = 1.0 / x^2
                rn = xx + a2[m2]
                for i in m2-1:-1:1
                    rn = rn*xx + a2[i]
                end
                den = b2[k2+1]
                for i in k2:-1:1
                    den = den*xx + b2[i]
                end
                y = x^(an+1.0)*rn/den
            end
        elseif j == 1 / 2
            # Method from [5]
            a1 = [5.75834152995465e6, 1.30964880355883e7, 1.07608632249013e7, 3.93536421893014e6, 6.42493233715640e5, 4.16031909245777e4, 7.77238678539648e2, 1.00000000000000e0]
            b1 = [6.49759261942269e6, 1.70750501625775e7, 1.69288134856160e7, 7.95192647756086e6, 1.83167424554505e6, 1.95155948326832e5, 8.17922106644547e3, 9.02129136642157e1]
            a2 = [4.85378381173415e-14, 1.64429113030738e-11, 3.76794942277806e-9, 4.69233883900644e-7, 3.40679845803144e-5, 1.32212995937796e-3, 2.60768398973913e-2, 2.48653216266227e-1, 1.08037861921488e0, 1.91247528779676e0, 1.00000000000000e0]
            b2 = [7.28067571760518e-14, 2.45745452167585e-11, 5.62152894375277e-9, 6.96888634549649E-7, 5.02360015186394e-5, 1.92040136756592e-3, 3.66887808002874e-2, 3.24095226486468e-1, 1.16434871200131e0, 1.34981244060549e0, 2.01311836975930e-1, -22.14562434782759e-2]
            an = 0.5
            m1, k1, m2, k2 = 7, 7, 10, 11
            if x < 2.0
                xx = exp(x)
                rn = xx + a1[m1]
                for i in m1-1:-1:1
                    rn = rn*xx + a1[i]
                end
                den = b1[k1+1]
                for i in k1:-1:1
                    den = den*xx + b1[i]
                end
                y = xx*rn/den
            else
                xx = 1.0 / x^2
                rn = xx + a2[m2]
                for i in m2-1:-1:1
                    rn = rn*xx + a2[i]
                end
                den = b2[k2+1]
                for i in k2:-1:1
                    den = den*xx + b2[i]
                end
                y = x^(an+1.0)*rn/den
            end
        elseif j == 3 / 2
        # Method from [5]
        a1 = [4.32326386604283e4, 8.55472308218786e4, 5.95275291210962e4, 1.77294861572005e4, 2.21876607796460e3, 9.90562948053193e1, 1.00000000000000e0]
        b1 = [3.25218725353467e4, 7.01022511904373e4, 5.50859144223638e4, 1.95942074576400e4, 3.20803912586318e3, 2.20853967067789e2, 5.05580641737527e0, 1.99507945223266e-2]
        a2 = [2.80452693148553e-13, 8.60096863656367e-11, 1.62974620742993e-8, 1.63598843752050e-6, 9.12915407846722e-5, 2.62988766922117e-3, 3.85682997219346e-2, 2.78383256609605e-1, 9.02250179334496e-1, 1.00000000000000e0]
        b2 = [7.01131732871184e-13, 2.10699282897576e-10, 3.94452010378723e-10, 3.84703231868724e-6, 2.04569943213216e-4, 5.31999109566385e-3, 6.39899717779153e-2, 3.14236143831882e-1, 4.70252591891375e-1, -2.15540156936373e-2, 2.34829436438087e-3]
        an = 0.5
        m1, k1, m2, k2 = 6, 7, 9, 10

            if x < 2.0
                xx = exp(x)
                rn = xx + a1[m1]
                for i in m1-1:-1:1
                    rn = rn*xx + a1[i]
                end
                den = b1[k1+1]
                for i in k1:-1:1
                    den = den*xx + b1[i]
                end
                y = xx*rn/den
            else
                xx = 1.0 / x^2
                rn = xx + a2[m2]
                for i in m2-1:-1:1
                    rn = rn*xx + a2[i]
                end
                den = b2[k2+1]
                for i in k2:-1:1
                    den = den*xx + b2[i]
                end
                y = x^(an+1.0)*rn/den
            end
        elseif j == 5 / 2
            # Method from [5]
            a1 = [6.61606300631656e4, 1.20132462801652e5, 7.67255995316812e4, 2.10427138842443e4, 2.44325236813275e3, 1.02589947781696e2,1.000000000000000]
            b1 = [1.99078071053871e4, 3.79076097261066e4, 2.60117136841197e4, 7.97584657659364e3, 1.10886130159658e3, 6.35483623268093e1, 1.16951072617142e0, 3.31482978240026e-3]
            a2 = [8.42667076131315e-12, 2.31618876821567e-9, 3.54323824923987e-7, 2.77981736000034e-5, 1.14008027400645e-3, 2.32779790773633e-2, 2.39564845938301e-1, 1.24415366126179e0, 3.18831203950106e0, 3.42040216997894e0, 1.00000000000000e0]
            b2 = [2.94933476646033e-11, 7.68215783076936e-9, 1.12919616415947e-6, 8.09451165406274e-5, 2.81111224925648e-3, 3.99937801931919e-2, 2.27132567866839e-1, 5.31886045222680e-1, 3.70866321410385e-1, 2.27326643192516e-2]
            an = 0.5
            m1, k1, m2, k2 = 6, 7, 10, 9
        
            if x < 2.0
                xx = exp(x)
                rn = xx + a1[m1]
                for i in m1-1:-1:1
                    rn = rn*xx + a1[i]
                end
                den = b1[k1+1]
                for i in k1:-1:1
                    den = den*xx + b1[i]
                end
                y = xx*rn/den
            else
                xx = 1.0 / x^2
                rn = xx + a2[m2]
                for i in m2-1:-1:1
                    rn = rn*xx + a2[i]
                end
                den = b2[k2+1]
                for i in k2:-1:1
                    den = den*xx + b2[i]
                end
                y = x^(an+1.0)*rn/den
            end
        else
            #Model proposed in [4]
            #Expressions from eqs. (6)-(7) of [4]
            a = (1 + 15 / 4 * (j + 1) + 1 / 40 * (j + 1)^2)^(1 / 2)
            b = 1.8 + 0.61 * j
            c = 2 + (2 - sqrt(2)) * 2^(-j)
            y = ((j + 1) * 2^(j + 1) / (b + x + (abs(x - b) .^ c + a^c) .^ (1 / c)) .^ (j + 1) +
                 exp(-x) / gamma(j + 1))^-1
        end
    end
    return y
end

function FermiDiracIntegralNorm(j::Real, eta::Real)
    if j < -1 / 2
        error("The order should be equal to or larger than -1/2.")
    else
        x = eta
        y = zero(x)
        if j == 0
            y = log(1 + exp(x))
        elseif j == -1 / 2
            # Method from [5]
            a1 = [1.71446374704454e7, 3.88148302324068e7, 3.16743385304962e7, 1.14587609192151e7, 1.83696370756153e6, 1.14980998186874e5, 1.98276889924768e3, 1.00000000000000e0]
            b1 = [9.67282587452899e6, 2.87386436731785e7, 3.26070130734158e7, 1.77657027846367e7, 4.81648022267831e6, 6.13709569333207e5, 3.13595854332114e4, 4.35061725080755e2]
            a2 = [-4.46620341924942e-15, -1.58654991146236e-12, -4.44467627042232e-10, -6.84738791621745e-8, -6.64932238528105e-6, -3.69976170193942e-4, -1.12295393687006e-2, -1.60926102124442e-1, -8.52408612877447e-1, -7.45519953763928e-1, 2.98435207466372e0, 1.00000000000000e0]
            b2 = [-2.23310170962369e-15,-7.94193282071464e-13, -2.22564376956228e-10, -3.43299431079845e-8, -3.33919612678907e-6, -1.86432212187088e-4, -5.69764436880529e-3, -8.34904593067194e-2, -4.78770844009440e-1, -4.99759250374148e-1, 1.86795964993052e0, 4.16485970495288e-1]
            an = 0.5
            m1, k1, m2, k2 = 7, 7, 11, 11
            if x < 2.0
                xx = exp(x)
                rn = xx + a1[m1]
                for i in m1-1:-1:1
                    rn = rn*xx + a1[i]
                end
                den = b1[k1+1]
                for i in k1:-1:1
                    den = den*xx + b1[i]
                end
                y = xx*rn/den
            else
                xx = 1.0 / x^2
                rn = xx + a2[m2]
                for i in m2-1:-1:1
                    rn = rn*xx + a2[i]
                end
                den = b2[k2+1]
                for i in k2:-1:1
                    den = den*xx + b2[i]
                end
                y = x^(an+1.0)*rn/den
            end
        elseif j == 1 / 2
            # Method from [5]
            a1 = [5.75834152995465e6, 1.30964880355883e7, 1.07608632249013e7, 3.93536421893014e6, 6.42493233715640e5, 4.16031909245777e4, 7.77238678539648e2, 1.00000000000000e0]
            b1 = [6.49759261942269e6, 1.70750501625775e7, 1.69288134856160e7, 7.95192647756086e6, 1.83167424554505e6, 1.95155948326832e5, 8.17922106644547e3, 9.02129136642157e1]
            a2 = [4.85378381173415e-14, 1.64429113030738e-11, 3.76794942277806e-9, 4.69233883900644e-7, 3.40679845803144e-5, 1.32212995937796e-3, 2.60768398973913e-2, 2.48653216266227e-1, 1.08037861921488e0, 1.91247528779676e0, 1.00000000000000e0]
            b2 = [7.28067571760518e-14, 2.45745452167585e-11, 5.62152894375277e-9, 6.96888634549649E-7, 5.02360015186394e-5, 1.92040136756592e-3, 3.66887808002874e-2, 3.24095226486468e-1, 1.16434871200131e0, 1.34981244060549e0, 2.01311836975930e-1, -22.14562434782759e-2]
            an = 0.5
            m1, k1, m2, k2 = 7, 7, 10, 11
            if x < 2.0
                xx = exp(x)
                rn = xx + a1[m1]
                for i in m1-1:-1:1
                    rn = rn*xx + a1[i]
                end
                den = b1[k1+1]
                for i in k1:-1:1
                    den = den*xx + b1[i]
                end
                y = xx*rn/den
            else
                xx = 1.0 / x^2
                rn = xx + a2[m2]
                for i in m2-1:-1:1
                    rn = rn*xx + a2[i]
                end
                den = b2[k2+1]
                for i in k2:-1:1
                    den = den*xx + b2[i]
                end
                y = x^(an+1.0)*rn/den
            end
        elseif j == 3 / 2
        # Method from [5]
        a1 = [4.32326386604283e4, 8.55472308218786e4, 5.95275291210962e4, 1.77294861572005e4, 2.21876607796460e3, 9.90562948053193e1, 1.00000000000000e0]
        b1 = [3.25218725353467e4, 7.01022511904373e4, 5.50859144223638e4, 1.95942074576400e4, 3.20803912586318e3, 2.20853967067789e2, 5.05580641737527e0, 1.99507945223266e-2]
        a2 = [2.80452693148553e-13, 8.60096863656367e-11, 1.62974620742993e-8, 1.63598843752050e-6, 9.12915407846722e-5, 2.62988766922117e-3, 3.85682997219346e-2, 2.78383256609605e-1, 9.02250179334496e-1, 1.00000000000000e0]
        b2 = [7.01131732871184e-13, 2.10699282897576e-10, 3.94452010378723e-10, 3.84703231868724e-6, 2.04569943213216e-4, 5.31999109566385e-3, 6.39899717779153e-2, 3.14236143831882e-1, 4.70252591891375e-1, -2.15540156936373e-2, 2.34829436438087e-3]
        an = 0.5
        m1, k1, m2, k2 = 6, 7, 9, 10

            if x < 2.0
                xx = exp(x)
                rn = xx + a1[m1]
                for i in m1-1:-1:1
                    rn = rn*xx + a1[i]
                end
                den = b1[k1+1]
                for i in k1:-1:1
                    den = den*xx + b1[i]
                end
                y = xx*rn/den
            else
                xx = 1.0 / x^2
                rn = xx + a2[m2]
                for i in m2-1:-1:1
                    rn = rn*xx + a2[i]
                end
                den = b2[k2+1]
                for i in k2:-1:1
                    den = den*xx + b2[i]
                end
                y = x^(an+1.0)*rn/den
            end
        elseif j == 5 / 2
            # Method from [5]
            a1 = [6.61606300631656e4, 1.20132462801652e5, 7.67255995316812e4, 2.10427138842443e4, 2.44325236813275e3, 1.02589947781696e2,1.000000000000000]
            b1 = [1.99078071053871e4, 3.79076097261066e4, 2.60117136841197e4, 7.97584657659364e3, 1.10886130159658e3, 6.35483623268093e1, 1.16951072617142e0, 3.31482978240026e-3]
            a2 = [8.42667076131315e-12, 2.31618876821567e-9, 3.54323824923987e-7, 2.77981736000034e-5, 1.14008027400645e-3, 2.32779790773633e-2, 2.39564845938301e-1, 1.24415366126179e0, 3.18831203950106e0, 3.42040216997894e0, 1.00000000000000e0]
            b2 = [2.94933476646033e-11, 7.68215783076936e-9, 1.12919616415947e-6, 8.09451165406274e-5, 2.81111224925648e-3, 3.99937801931919e-2, 2.27132567866839e-1, 5.31886045222680e-1, 3.70866321410385e-1, 2.27326643192516e-2]
            an = 0.5
            m1, k1, m2, k2 = 6, 7, 10, 9
        
            if x < 2.0
                xx = exp(x)
                rn = xx + a1[m1]
                for i in m1-1:-1:1
                    rn = rn*xx + a1[i]
                end
                den = b1[k1+1]
                for i in k1:-1:1
                    den = den*xx + b1[i]
                end
                y = xx*rn/den
            else
                xx = 1.0 / x^2
                rn = xx + a2[m2]
                for i in m2-1:-1:1
                    rn = rn*xx + a2[i]
                end
                den = b2[k2+1]
                for i in k2:-1:1
                    den = den*xx + b2[i]
                end
                y = x^(an+1.0)*rn/den
            end
        else
            #Model proposed in [4]
            #Expressions from eqs. (6)-(7) of [4]
            a = (1 + 15 / 4 * (j + 1) + 1 / 40 * (j + 1)^2)^(1 / 2)
            b = 1.8 + 0.61 * j
            c = 2 + (2 - sqrt(2)) * 2^(-j)
            y = ((j + 1) * 2^(j + 1) / (b + x + (abs(x - b) .^ c + a^c) .^ (1 / c)) .^ (j + 1) +
                 exp(-x) / gamma(j + 1))^-1
        end
    end
    return y.*1/(gamma(j+1))
end

x = range(0,100,10000)

plot(x,FermiDiracIntegralNorm.(-1/2,x),label=L"F_{-1/2}(x)")
plot!(x,FermiDiracIntegralNorm.(1/2,x),label=L"F_{1/2}(x)")
plot!(x,FermiDiracIntegralNorm.(3/2,x),label=L"F_{3/2}(x)")
plot!(x,FermiDiracIntegralNorm.(5/2,x),label=L"F_{5/2}(x)")
title!("Fermi-Dirac Integral")
xlabel!(L"x")
